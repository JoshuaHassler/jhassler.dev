{"version":3,"sources":["Theme.js","NavBar.js","HomeCard.js","AboutCard.js","App.js","serviceWorker.js","index.js"],"names":["createMuiTheme","typography","useNextVariants","palette","primary","main","blue","secondary","pink","A400","type","NavBar","state","anchorEl","section","setSection","val","cb","_this","setState","handleClick","event","currentTarget","handleClose","console","log","textContent","nextSection","_this$state","this","sectionHdr","react_default","a","createElement","AppBar_default","position","Toolbar_default","IconButton_default","aria-owns","undefined","aria-haspopup","onClick","Menu_default","Typography_default","variant","color","core_Menu_default","id","open","Boolean","onClose","MenuItem_default","React","Component","IndexCard","classes","props","Card_default","className","card","CardMedia_default","media","image","title","withStyles","theme","maxWidth","marginLeft","marginRight","height","paddingTop","marginTop","fontSize","pos","marginBottom","CardContent_default","gutterBottom","component","App","MuiThemeProvider_default","CssBaseline_default","src_NavBar","HomeCard","src_AboutCard","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f9094a1.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\nimport pink from '@material-ui/core/colors/pink';\nimport blue from '@material-ui/core/colors/blue';\n\nexport default createMuiTheme({\n    typography: {\n        useNextVariants: true,\n    },\n    palette: {\n        primary: {\n            main: blue[700]\n        },\n        secondary: {\n            main: pink.A400\n        },\n        type: 'dark'\n    }\n});\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Typography from '@material-ui/core/Typography';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nclass NavBar extends React.Component {\n    state = {\n        anchorEl: null,\n        section: \"Home\",\n    };\n\n    setSection = (val, cb) => {\n        this.setState({ section: val }, cb);\n    };\n\n    handleClick = event => {\n        this.setState({ anchorEl: event.currentTarget });\n    };\n\n    handleClose = event => {\n        console.log( event.currentTarget.textContent );\n        var nextSection = ( event.currentTarget.textContent !== '' )?\n            event.currentTarget.textContent : this.state.section;\n        this.setState({ anchorEl: null, section: nextSection });\n    };\n\n    render() {\n        const { anchorEl, section } = this.state;\n        var sectionHdr = (section === \"Home\")? \"\" : \": \" + section;\n\n        return (\n            <div>\n                <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton\n                        aria-owns={anchorEl ? 'simple-menu' : undefined}\n                        aria-haspopup=\"true\"\n                        onClick={this.handleClick}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" color=\"inherit\">\n                        jhassler.dev{ sectionHdr }\n                    </Typography>\n                    <Menu\n                        id=\"simple-menu\"\n                        anchorEl={anchorEl}\n                        open={Boolean(anchorEl)}\n                        onClose={this.handleClose}\n                    >\n                        <MenuItem onClick={this.handleClose}>Home</MenuItem>\n                        <MenuItem onClick={this.handleClose}>About Me</MenuItem>\n                        <MenuItem onClick={this.handleClose}>Experience</MenuItem>\n                        <MenuItem onClick={this.handleClose}>Resume</MenuItem>\n                        <MenuItem onClick={this.handleClose}>Contact</MenuItem>\n                    </Menu>\n                </Toolbar>\n                </AppBar>\n            </div>\n        );\n    }\n}\n\nexport default NavBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nconst styles = theme => ({\n    card: {\n        maxWidth: 1000,\n        marginLeft: 'auto',\n        marginRight: 'auto',\n    },\n    media: {\n        height: 0,\n        paddingTop: '56.25%', // 16:9\n    },\n});\n\nclass IndexCard extends React.Component {\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <Card className={classes.card}>\n                <CardMedia\n                    className={classes.media}\n                    image=\"https://images.pexels.com/photos/730896/pexels-photo-730896.jpeg?auto=compress&cs=tinysrgb&h=750&w=1260\"\n                    title=\"Some Code\"\n                />\n            </Card>\n        );\n    }\n}\n\nIndexCard.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(IndexCard);\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = {\n    card: {\n        maxWidth: 950,\n        marginTop: 20,\n        marginLeft: 'auto',\n        marginRight: 'auto',\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n};\n\nfunction AboutCard(props) {\n    const { classes } = props;\n\n    return (\n        <Card className={classes.card}>\n            <CardContent>\n                <Typography variant=\"h7\" className={classes.title} color=\"textSecondary\" gutterBottom>\n                    About Me\n                </Typography>\n                <Typography component=\"p\">\n                    Site Currently Under Construction\n                </Typography>\n            </CardContent>\n        </Card>\n    );\n}\n\nAboutCard.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(AboutCard);\n\n","import React, { Component } from 'react';\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport theme from './Theme';\nimport NavBar from './NavBar';\nimport HomeCard from './HomeCard';\nimport AboutCard from './AboutCard';\n\nclass App extends Component {\n    render() {\n        return (\n            <MuiThemeProvider theme={theme}>\n            <CssBaseline />\n            <div className=\"App\">\n                <NavBar />\n                <HomeCard />\n                <AboutCard />\n            </div>\n            </MuiThemeProvider>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}